/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aho <aho@student.42.us.org>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/11/09 00:57:23 by aho               #+#    #+#             */
/*   Updated: 2017/12/10 19:01:58 by aho              ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft/libft.h"
#include "get_next_line.h"

int ft_strsublen(char *str, int i, char c)
{
	int count;
	count = 0;
	while (str[i] != c)
	{
		count++;
		i++;
	}
	return (count); 
}

int ft_countc(char *str, char c)
{
	int i;
	int count;
	i = 0;
	count = 0;
	while (str[i] != '\0') 
	{
		if (str[i] == c) 
			count++;
		i++;
	}
	return (count);
}

int findnl(char **saved, char **line, char *buf)
{
	printf("inside findnl buf:%s--\n", buf);
	int i;
	char *ptrsaved;
	char *newsaved;
	char *linestr;
//	int newsavedlen;
	i = 0;
/*
	if (!(newsaved = ft_strchr(*saved, '\n')))
	{
		newsaved = buf;
	}
*/
//	newsaved = buf;
//	printf("inside findnl newsaved:%s--\n", newsaved);
//	ptrsaved = *saved;

//	printf("inside findnl ptrsaved:%s--\n", ptrsaved);
//	*saved = ft_strjoin(ptrsaved, buf);
//	printf("inside findnl strjoin *saved:%s--\n", *saved);
//	ft_strdel(&ptrsaved);
	if (buf[0] == '\0') 
		return (0);
	if (ft_strchr(*saved, '\n') == NULL) 
		return (0);
//	printf("hi\n");
//	ft_strdel(&ptrsaved);
//	ft_strdel(&buf);
	ptrsaved = *saved;
	printf("ptrsaved:%s--\n", ptrsaved);
	if (ptrsaved[0] == '\n')
	{
		printf("ptrsaved[0] newline \n");
		linestr = ft_strnew(1);
		linestr[i] = '\0';
	}
	if (ft_strchr(ptrsaved, '\n') != NULL)
	{
		printf("processing nl\n");
//		printf("ptrsaved:%s--\n", ptrsaved);
		linestr = ft_strnew(ft_strsublen(ptrsaved, 0, '\n'));
		while (ptrsaved[i] != '\n')
		{
			linestr[i] = ptrsaved[i];
			i++;
		}
		linestr[i] = '\0';

	}
	else
		linestr = *saved;

	*line = strdup(linestr);
	ft_strdel(&linestr);

	printf("return - inside findnl saved:%s--\n", *saved);
	if (ft_strchr(*saved, '\n') != NULL)
	{	
		newsaved = ft_strchr(*saved, '\n') + 1;
		*saved = strdup(newsaved);
		ft_strdel(&ptrsaved);
		return (1);
	}
	printf("return - inside findnl line:%s---\n", *line);
//	ft_strdel(&ptrsaved);
	return (1);
}


int get_next_line(const int fd, char **line) 
{
	printf("\n>>>>>> GNL CALLED\n");
	int ret;
	char *buf;
	static char *saved;

	if (!(buf = ft_strnew(0)))
		return (-1);
//	printf("\n----GETNEXTLINE CALLED-----\n");
//	printf("saved:%s--\n", saved);

	if (saved != NULL && findnl(&saved, line,buf))
	{
		return (1);
	}

	if (saved == NULL && !(saved = ft_strnew(0)))
		return (-1);
	if (ft_strchr(saved, '\n') != NULL && findnl(&saved, line, buf))
//	if (saved != NULL && findnl(&saved, line, buf))
	{
//		printf("bloop\n");
//		printf("\nreturn 1 - remaining line: %s--\n", *line);	
		return (1);
	}
	while ((ret = read(fd, buf, BUFF_SIZE)) > 0)
	{
		printf("ret is %d\n", ret);
		buf[ret] = '\0';

		saved = ft_strjoin(saved, buf); 
		//keep appending as long as there is no nl

		if (ft_strchr(saved, '\n') != NULL)
		{
//			ft_strdel(buf);
			break;
		}
//		printf("ret: %d\n", ret);
//		printf("buf:%s--\n", buf);
/*
		if (findnl(&saved, line, buf) == 1)
		{
			printf("\nreturn 1 - initial read line:%s--\n", *line);
			return (1);
		}
*/
	}
	
	if (findnl(&saved, line, buf) == 1)
	{
		printf("\nreturn 1 - initial read line:%s--\n", *line);
		return (1);
	}
	



//	if (saved != NULL) 
//		return (1);

/*
	if (ret <= 0)
		printf("ret is %d\n", ret);
*/
/*
	if (ret == EOF) 
		printf("hello\n");

	while ((ret = read(fd, buf, 1)) > 0)
	{
		printf("continues reading\n");
	}

	if ((ret = read(fd, buf, BUFF_SIZE)) < 0)
	{
		buf = ft_strnew(BUFF_SIZE);
		while ((ret = read(fd, buf, 1) > 0))
			i++;
		buf[i] = '\0';
		if (findnl(&saved, line, buf) == 1) 
			return (1);
	}
*/
	free(buf);
	close(fd);
	return (0);
}
